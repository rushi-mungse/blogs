import Head from "next/head";
import { fetchArticles, fetchCategories } from "../http";
import { ICategory, ICollectionResponse, IArticle } from "../types";
import { AxiosResponse } from "axios";
import { GetServerSideProps, NextPage } from "next";
import Tabs from "../components/Tabs";
import qs from "qs";
import ArticlesList from "../components/ArticlesList";
import { useRouter } from "next/router";
import { debounce } from "../utils";

interface IOptions {
  populate: string[];
  sort: string[];
  filters?: object;
}
interface IPropType {
  categories: {
    items: ICategory[];
  };
  articles: {
    items: IArticle[];
  };
}

const Home: NextPage<IPropType> = ({ categories, articles }) => {
  const router = useRouter();
  const handleOnSearch = (query: string): void => {
    router.push(`/?search=${query}`);
  };

  return (
    <div className="pb-24">
      <Head>
        <title>Coders Blog's</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs
        categories={categories.items}
        handleSearch={debounce(handleOnSearch, 500)}
      />
      <ArticlesList articles={articles.items} />
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const options: Partial<IOptions> = {
    populate: ["image", "author.avatar"],
    sort: ["id:desc"],
  };
  if (query.search) {
    options.filters = {
      title: {
        $containsi: query.search,
      },
    };
  }
  const queryString = qs.stringify(options);

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString);

  return {
    props: {
      categories: {
        items: categories.data,
      },
      articles: {
        items: articles.data,
      },
    },
  };
};

export default Home;
